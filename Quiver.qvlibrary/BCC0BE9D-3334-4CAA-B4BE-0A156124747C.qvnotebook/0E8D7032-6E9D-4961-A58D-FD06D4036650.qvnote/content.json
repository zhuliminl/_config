{
  "title": "编程谏言",
  "cells": [
    {
      "type": "text",
      "data": "<div>1.重构是程序员的主力技能。</div><div><br></div><div><br></div><div><br></div><div># 好的项目作风硬派，一键测试，一键发布，一键部署; 烂的项目生性猥琐，口口相传，不立文字，神神秘秘。</div><div><br></div><div>忘掉优化写代码。过早优化等同恶意破坏；忘掉代码作优化。优化要基于性能测试，而不是纠结于字里行间。</div><div><br></div><div>leader问任务时间，若答不上来，可能是任务拆分还不够细。</div><div><br></div><div>宁可多算一周，不可少估一天。过于\"乐观\"容易让boss受惊吓。</div><div><br></div><div>百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。</div><div><br></div><div>Log要写时间与分类。并且要能重定向输出。</div><div><br></div><div>注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。</div><div><br></div><h1>造轮子是很好的锻炼方法。前提是你见过别的轮子。</h1><h2>## 2.编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。</h2><div><br></div><div>技术崇拜是个很LOW的行为。技术和人是分开的。</div><div><br></div><h1># 唯一有关联的是高手可以很快掌握新技术。而不是我使用了新技术我就是高手。</h1><div><br></div><h1># `*凡是可能出错，就一定出错*`</h1><div><br></div><h2>而这种思维方式可以让我们不停地把一个大的任务在同一个层级做分解，保证这一层的步骤和逻辑正确以后，然后再下一层分解，最后其实是一个树状的结构，树的叶子结点才是具体的代码算法实现。在编码的时候，我只用我有限的脑力关注当前层级的任务，不关注上一层也不关注 下一层的细节。</h2><div><br></div><h1># \"凡是可能出错，就一定出错。”&nbsp;<br># 凡是可能出错，就一定出错</h1><h1><br># 凡是可能出错，就一定出错</h1><div># 匀速编程</div><div><br></div>"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}