{
  "title": "对函数语义的认识 —— 职责分离",
  "cells": [
    {
      "type": "code",
      "language": "python",
      "data": "\n把函数看作一个管道。默认总是会有输入的 in 和 输出的 out 。\n无论是什么情况，请假设以上的 in 和 out 都必须存在。\n\n那这个 out 就会衍生出很多内容。它可以吐出 对象，数据，真假，以及 函数本身。\n而这个 in 的话，就是参数，参数也开始叫做材料。是我们过程化思考中对数据类型的泛化。\n在语义中，参数则是名词的比较多。如何我们传递动词结构，那肯定差不多就是在传递函数，这可能是对行为的一种修饰和表达，让编程显得更灵活。\n\n接着说关于函数抽象。我必须这么理解。一开始是绝对过程式的思考。整个过程是为了完成一段任务。\n而函数抽象则是就这个任务里面的每段做一个总结，基于职责分离出来，给出更好的语义化的组织。\n同时，原来过程中所有的具体的数据也会做一次泛化，已达到这种分离的过程。\n\n我相信抽象总是为了更好的语义的。想要组织好写好代码，对语义的理解肯定得要求很高。\n我最先想到的有两种。一种是判断式的。比如，函数 isOpen。\n一种是动宾式的。比如，getName, createObj。\n然后在动宾语境中，宾语可以被省略掉。比如在表单验证中的函数 validate。不这个还不行。的叫做 validata \n那就还是一个动宾结果的关系存在。\n可能在基于对象中，省略的空间就会更大一些，因为我们知道宾语是谁。比如 Form.validate \n但是本质上其实还是 动宾这个结构。\n是动在前还是宾在前。暂时还没有想出个所以然。好像都可以。\n\n那到底是先组织语义呢？还是组织过程呢？\n我觉得这个靠的完全是熟练度。你有那个熟练思维，那你第一步肯定就会跳到语义思考的层面。\n但是如果你最基础的过程都实现不了的话，从一开始就从语义上自上而下构建可能就有点难。\n那我的建议就是。平时每写一段代码，就给出几段语义上的总结和思考。\n久而久之，这种思维肯定能培养出来 —— 不信我们等着瞧\n\n\n"
    }
  ]
}