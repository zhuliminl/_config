{
  "title": "错误处理问题",
  "cells": [
    {
      "type": "text",
      "data": "<div><br></div><div><a href=\"https://codeburst.io/catching-exceptions-using-higher-order-components-in-react-16-b8a401853a10\">https://codeburst.io/catching-exceptions-using-higher-order-components-in-react-16-b8a401853a10</a><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "\nfunction withErrorHandler (errorCallback, FallbackComponent, Component) {\n  class WithErrorHandler extends React.Component {\n    constructor () {\n      super()\n  \n      // Construct the initial state\n      this.state = {\n        hasError: false,\n        error: null,\n        errorInfo: null\n      }\n    }\n\n    componentDidCatch (error, info) {\n      // Update state if error happens\n      this.setState({ hasError: true, error, errorInfo: info })\n\n      // Report errors\n      errorCallback(error, info, this.props)\n    }\n\n    render () {\n      // if state contains error we render fallback component\n      if (this.state.hasError) {\n        const { error, errorInfo } = this.state\n        return (\n          <FallbackComponent\n            {...this.props}\n            error={error}\n            errorInfo={errorInfo}\n          />\n        )\n      }\n\n      return <Component {...this.props} />\n    }\n  }\n  WithErrorHandler.displayName = `withErrorHandler(${Component.displayName})`\n  return WithErrorHandler\n}"
    }
  ]
}