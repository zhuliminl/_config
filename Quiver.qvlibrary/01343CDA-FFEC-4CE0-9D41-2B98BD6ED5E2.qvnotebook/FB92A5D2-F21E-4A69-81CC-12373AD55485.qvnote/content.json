{
  "title": "不断理解和深化理解数据结构实在是太重要了",
  "cells": [
    {
      "type": "text",
      "data": "<div><br></div><div>在交互编程的导航路由设计这一块、在函数执行这一块，应该不断地去理解栈的意义。当我们的关注点是在当前，也就是 current point 的时候，我们自然而然地使用的是 栈 的结构。</div><div><br></div><div>在任务执行这一块，则应该不断地去理解队列这个思想。而当我们的关注点是任务 finish 的时候，并不在乎 current 的时候，我们首相想到的就是队列。</div><div><br></div><div>这两种数据结构种，栈的重点多在于出来。而队列更多关注的是怎么放进去，以及它的整体循环。</div><div><br></div><div>两者的共同点则是，它们都是一个由堆积再到消解的一个数据处理过程。</div><div><br></div><div>片面一点理解，好像在队列的另一头去看，它似乎就是一个不断消解的一个栈。</div><div><br></div><div>最后，如果以更抽象的思维去理解栈和队列。那就是将它们都看成是 资料 和 任务 这两块组成。</div><div>那从这个角度去看，其实资料和任务之间是需要交流的。任务应该发出结束信息，资料则需要考虑接受它的消息，并给出下一份任务。同时，对于队列结构，还要自己维护一份资料。</div><div><br></div><div>那在这个角度，能不能再思考一下任务的结果本身会不会和资料产生实质上的交互呢？明显有的。递归的栈就是这样的一个现象。递归其实就是栈顶的任务结果参与了下一次的任务生产！尾调递归的优化更像是实现了资料序列的一种传递压缩，最后直接和最顶部的任务发生了一次性的运算。函数与函数之间如果<u>需要被完全替换，同时又保证资料的不丢失，那必然是在函数参数上做手脚，通过参数来传递结果。</u></div><div><br></div><div><br></div><div>最后你发现，只要你以 资料 和 任务 这两个概念的思维去理解编程，会发现很多实在并且清晰的解释。尤其是函数式编程、响应式编程中更为明显。</div><div>想想消费者、生产者的这中显式的消化资料和产生资料的模型。</div><div><br></div><div>想想发布订阅模型中随机性的、任意的发布资料和处理资料任务的模型。</div><div>想想普通的回调思想。是不是似乎有一种讲任务当做资料零时存储的感觉？回调函数其实是一种任务，但是它明显被当做一种资料储存了起来。而在将来的某个时刻，它又第三方主动拉了出来并且塞入了资料，让它承担起任务的角色。正式因为这个模型实现了如此灵活的转化机制，才显得回调模型是如此的优化灵活可靠。而它的反面，则是因为缺乏了 资料 向 任务 这两个概念的转化而产生的 反直觉 造成的。</div><div><br></div><div>那能不能进一步反想？回调的本质其实反应的是任务到资料和资料到任务的转化。还有没有更多的例子？</div><div>最后想想 promise 的设计意义。其实 promise 的结果，就是一种资料。而promise 的过程，就是一种任务。然后我们就清晰地认识到，如果我们需要这门资料，那我们就要考虑同步的思维。需要 await 。但是如果我们不需要这们资料，那它完全就可以放飞自我。</div><div><br></div><div>哈哈。我发现任何编程问题。其实都可以用 资料 和 任务 这两个概念往里面套。也许用两个概念，就可以把所有的问题都搞清楚了。&nbsp;</div><div><br></div><div><br></div><div><br></div>"
    }
  ]
}