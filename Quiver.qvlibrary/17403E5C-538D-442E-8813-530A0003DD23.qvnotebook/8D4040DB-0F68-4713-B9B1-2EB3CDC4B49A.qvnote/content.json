{
  "title": "React-Native 本地储存",
  "cells": [
    {
      "type": "text",
      "data": "<div><br></div><div><div>&nbsp;* Created by Saul at 2018/05/17</div><div>&nbsp;*</div><div>&nbsp;* 前端本地的数据库</div><div>&nbsp;*</div><div>&nbsp;* realm 适合于储存前端本地的一些离线数据</div><div>&nbsp;* 比如 购物车、浏览历史 等结构化的数据</div><div>&nbsp;*</div><div>&nbsp;* 对于 token 其实更适合用普通的键值对储存方案</div><div>&nbsp;* 但是由于 react-native in Android 本地储存的 Promise 有 BUG</div><div>&nbsp;* 所以 token 也只好放到 realm 里面作为 single value 来储存</div><div>&nbsp;*</div><div>&nbsp;* 本文件结构：</div><div>&nbsp;* &nbsp; &nbsp; 模型定义</div><div>&nbsp;* &nbsp; &nbsp; 数据库配置</div><div>&nbsp;* &nbsp; &nbsp; 各个模型的方法</div><div>&nbsp;* &nbsp; &nbsp; 导出实例</div><div>&nbsp;*</div><div>&nbsp;* 后期考虑拆分到更细的结构模块</div><div>&nbsp;*</div><div>&nbsp;*/</div><div><br></div><div>import Realm from 'realm';</div><div><br></div><div>// 数据表</div><div>export const TOKEN_SCHEMA = 'Token';</div><div><br></div><div>/**</div><div>&nbsp;*</div><div>&nbsp;* 定义模型</div><div>&nbsp;*/</div><div><br></div><div>// Token 只需要一个值和三个方法:</div><div>// &nbsp; &nbsp; 初始化 fake token（只调用一次）</div><div>// &nbsp; &nbsp; get 获取 token</div><div>// &nbsp; &nbsp; set 覆盖 token</div><div>// 特殊之处是从来不添加新的值</div><div>// 而是从始至终覆盖初始化的第一个值</div><div>const TokenSchema = {</div><div>&nbsp; name: TOKEN_SCHEMA,</div><div>&nbsp; properties: {</div><div>&nbsp; &nbsp; 'value': {</div><div>&nbsp; &nbsp; &nbsp; type: 'string',</div><div>&nbsp; &nbsp; }</div><div>&nbsp; }</div><div>};</div><div><br></div><div><br></div><div>// 数据全局配置</div><div>const databaseOptions = {</div><div>&nbsp; &nbsp; path: 'artCarrier.realm',</div><div>&nbsp; &nbsp; schema: [TokenSchema],</div><div>&nbsp; &nbsp; schemaVersion: 0,</div><div>};</div><div><br></div><div><br></div><div>/**</div><div>&nbsp;*</div><div>&nbsp;* 各个模型的方法</div><div>&nbsp;*/</div><div><br></div><div>// 在程序第一次使用的时候创建一个 fake token</div><div>// 该方法在整个 app 生命周期中仅执行一次!</div><div>export const createFakeTokenOnceOnly = () =&gt; new Promise((resolve, reject) =&gt; {</div><div>&nbsp; Realm.open(databaseOptions).then(realm =&gt; {</div><div>&nbsp; &nbsp; const tokens = realm.objects(TOKEN_SCHEMA);</div><div>&nbsp; &nbsp; if(tokens.length === 0) {</div><div>&nbsp; &nbsp; &nbsp; // 创建 fake token</div><div>&nbsp; &nbsp; &nbsp; realm.write(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const fakeToken = realm.create(TOKEN_SCHEMA, {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value: 'a fake token'</div><div>&nbsp; &nbsp; &nbsp; &nbsp; });</div><div>&nbsp; &nbsp; &nbsp; &nbsp; resolve(fakeToken.value)</div><div>&nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; } else {</div><div>&nbsp; &nbsp; &nbsp; const token = tokens[0];</div><div>&nbsp; &nbsp; &nbsp; resolve(token.value)</div><div>&nbsp; &nbsp; }</div><div>&nbsp; }).catch(error =&gt; { reject(error) });</div><div>})</div><div><br></div><div>export const setToken = (value) =&gt; new Promise((resolve, reject) =&gt; {</div><div>&nbsp; Realm.open(databaseOptions).then(realm =&gt; {</div><div>&nbsp; &nbsp; realm.write(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; const tokens = realm.objects(TOKEN_SCHEMA);</div><div>&nbsp; &nbsp; &nbsp; const token = tokens[0];</div><div>&nbsp; &nbsp; &nbsp; token.value = value;</div><div>&nbsp; &nbsp; &nbsp; resolve(token.value)</div><div>&nbsp; &nbsp; })</div><div><br></div><div>&nbsp; }).catch(error =&gt; { reject(error) })</div><div>})</div><div><br></div><div>export const getToken = () =&gt; new Promise((resolve, reject) =&gt; {</div><div>&nbsp; Realm.open(databaseOptions).then(realm =&gt; {</div><div>&nbsp; &nbsp; const tokens = realm.objects(TOKEN_SCHEMA);</div><div>&nbsp; &nbsp; const token = tokens[0];</div><div>&nbsp; &nbsp; resolve(token.value)</div><div>&nbsp; }).catch(error =&gt; { reject(error) })</div><div>})</div><div><br></div><div><br></div><div>export default new Realm(databaseOptions);</div><div><br></div><div><br></div><div>// 测试 realm 的使用</div><div>export const queryToken = () =&gt; new Promise((resolve, reject) =&gt; {</div><div>&nbsp; Realm.open(databaseOptions).then(realm =&gt; {</div><div><br></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; // write one</div><div>&nbsp; &nbsp; realm.write(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; const tokenA = realm.create(TOKEN_SCHEMA, {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; value: 'a nother token'</div><div>&nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; &nbsp; console.log('tokenA', tokenA.value)</div><div>&nbsp; &nbsp; });</div><div><br></div><div>&nbsp; &nbsp; // query all</div><div>&nbsp; &nbsp; setTimeout(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; const tokens = realm.objects(TOKEN_SCHEMA).sorted('value');</div><div>&nbsp; &nbsp; &nbsp; tokens.forEach(item =&gt; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; console.log('token item', item.value)</div><div>&nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; &nbsp; console.log('tokens', tokens)</div><div>&nbsp; &nbsp; }, 4000)</div><div><br></div><div>&nbsp; &nbsp; // delete all</div><div>&nbsp; &nbsp; setTimeout(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; realm.write(() =&gt; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; const tokens = realm.objects(TOKEN_SCHEMA).sorted('value');</div><div>&nbsp; &nbsp; &nbsp; &nbsp; realm.delete(tokens)</div><div>&nbsp; &nbsp; &nbsp; })</div><div>&nbsp; &nbsp; }, 5000)</div><div>&nbsp; &nbsp; */</div><div><br></div><div>&nbsp; &nbsp; // 特殊点： 我们只需要第一个值就够了</div><div>&nbsp; &nbsp; let tokens = realm.objects(TOKEN_SCHEMA);</div><div>&nbsp; &nbsp; console.log('tokens length', tokens.length)</div><div>&nbsp; &nbsp; tokens.forEach(item =&gt; {</div><div>&nbsp; &nbsp; &nbsp; console.log('tokens item', item)</div><div>&nbsp; &nbsp; })</div><div>&nbsp; &nbsp; let token = tokens;</div><div>&nbsp; &nbsp; resolve(token);</div><div>&nbsp; }).catch(error =&gt; {</div><div>&nbsp; &nbsp; reject(error);</div><div>&nbsp; })</div><div>});</div><div><br></div></div><div><br></div>"
    }
  ]
}